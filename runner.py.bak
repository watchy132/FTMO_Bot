# runner.py ‚Äî client simple qui interroge le bridge /decide
# (Version tol√©rante aux sorties du LLM)

import json
import time
import requests
import sys

BRIDGE_URL = "http://127.0.0.1:8765/decide"

def _extract_setups(resp: dict):
    v = resp.get("setups", resp.get("setup", []))
    if isinstance(v, dict):
        return [v]
    if isinstance(v, list):
        return [x for x in v if isinstance(x, dict)]
    # bool/None/str -> pas de setups
    return []

def _pretty(obj):
    try:
        return json.dumps(obj, indent=2, ensure_ascii=False)
    except:
        return str(obj)

def decide_once(symbol: str, timeframe_minutes: int):
    payload = {
        "symbol": symbol,
        "price": None,            # si tu veux passer un prix courant
        "ask_for": "Decision",
        "timeframe": f"M{timeframe_minutes}",
        "rules": {"rrr_min": 2.0, "risk_pct": 0.005},
    }
    r = requests.post(BRIDGE_URL, headers={"Content-Type":"application/json"},
                      data=json.dumps({"prompt": json.dumps(payload)}))
    r.raise_for_status()
    raw = r.json()
    print(f"{symbol}: GPT raw -> {_pretty(raw)}")

    action = str(raw.get("action") or "hold").lower()
    if action in ("none", "skip"):
        action = "hold"

    setups = _extract_setups(raw)

    if action == "hold" and not setups:
        print(f"{symbol}: action=SKIP (setup invalide ou absent)")
        return

    # Ici tu g√®res ENTER/CLOSE si ton bot le fait r√©ellement.
    # Exemples :
    if action in ("enter", "buy", "sell") and setups:
        chosen = setups[0]
        print(f"{symbol}: ENTER {chosen.get('direction')} @{chosen.get('entry')} SL={chosen.get('sl')} TP={chosen.get('tp')}")
    elif action in ("close", "exit"):
        print(f"{symbol}: CLOSE positions")
    else:
        print(f"{symbol}: HOLD")

def main():
    # param√®tre simple via argv: --symbol EURUSD --minutes 5
    args = sys.argv[1:]
    sym = "EURUSD"
    minutes = 5
    for i, a in enumerate(args):
        if a == "--symbol" and i+1 < len(args):
            sym = args[i+1]
        if a == "--minutes" and i+1 < len(args):
            minutes = int(args[i+1])

    print(f"ü§ñ Runner lanc√©: symbol={sym}, tf={minutes}")
    # Boucle de d√©mo courte :
    for _ in range(3):
        decide_once(sym, minutes)
        time.sleep(2)

if __name__ == "__main__":
    main()
